;;; init.el -- My Emacs configuration
;-*-Emacs-Lisp-*-

;;; Commentary:
;;
;; Stolen from aaronbieber (https://github.com/aaronbieber)
;;
;;; Code:


;; Leave this here, or package.el will just add it again.
(package-initialize)

(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

;; Also add all directories within "lisp"
;; I use this for packages I'm actively working on, mostly.
(let ((files (directory-files-and-attributes "~/.emacs.d/lisp" t)))
  (dolist (file files)
    (let ((filename (car file))
          (dir (nth 1 file)))
      (when (and dir
                 (not (string-suffix-p "." filename)))
        (add-to-list 'load-path (car file))))))

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this 


;; Don't litter my init file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)

(require 'init-utils)
(require 'init-elpa)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony))

(setq-default indent-tabs-mode nil)
(setq tab-width 4) ; or any other preferred value

(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(setq-default fill-column 80)

;;Adding dockerfile-mode
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))

;;Adding yaml-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;;Bind newline-and-indent to enter in yaml files
(add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;;Adding lisp-mode
(require 'lisp-mode)
(add-to-list 'auto-mode-alist '("emacs" . lisp-mode))


;;get rid of welcome screen and startup message
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;;Adding octave-mode
(autoload 'octave-mode "octave-mode" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))

;;Adding shell-script-mode
(add-to-list 'auto-mode-alist '("\\.sh\\'" . shell-script-mode))

;;autosave files
;;(setq auto-save-file-name-transforms
;;     `(("." . "~/.emacs.autosave")))

;;backup files
(setq backup-directory-alist `(("." . "~/.emacs.backup")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)

;;Better to use org-mode
(require 'org)

;;Log time when done
(setq org-log-done 'time)


;;Auto open some files
(find-file "~/Documents/org-mode/todo-personal.org")

;;Switch to *scratch* after opening previous files
(switch-to-buffer "*scratch*")

;;Set server stuff
(setq server-socket-dir "~/.emacs.d")
(setq server-use-tcp nil)


(use-package helm
  :ensure t
  :diminish helm-mode
  :commands helm-mode
  :config
  (helm-mode 1)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
  (define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level))
